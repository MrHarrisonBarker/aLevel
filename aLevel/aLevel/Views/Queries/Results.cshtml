@using ikvm.extensions
@model IEnumerable<aLevel.Models.SentimentViewModel>

@{
    ViewBag.Title = "Search";
}

@functions {

    private String ChooseColor(String sentiment)
    {
        if (sentiment == "VeryNegative")
        {
            return ("#E30202");
        }
        else if (sentiment == "Negative")
        {
            return ("#FF3737");
        }
        else if (sentiment == "Neutral")
        {
            return ("#FCD72D");
        }
        else if (sentiment == "Positive")
        {
            return ("#8EDC23");
        }
        else if (sentiment == "VeryPositive")
        {
            return ("#2FCF0B");
        }
        else
        {
            return null;
        }
    }

    private int isZero(int count)
    {
        if (count == 0)
        {
            return 1;
        }
        else
        {
            return count;
        }
    }

}


<div class="row">
        <canvas width="500" height="500"></canvas>
        <script>

            var data = [0, 0, 0, 0, 0];

            @foreach (var item in Model)
            {
                if (item.SentimentText == "VeryNegative")
                {
                    @:data[0]++;
                }
                else if (item.SentimentText == "Negative")
                {
                    @:data[1]++;
                }
                else if (item.SentimentText == "Neutral")
                {
                    @:data[2]++;
                }
                else if (item.SentimentText == "Positive")
                {
                    @:data[3]++;
                }
                else if (item.SentimentText == "VeryPositive")
                {
                    @:data[4]++;
                }
            }

            alert(data);

            var canvas = document.querySelector("canvas"),
                context = canvas.getContext("2d");

            var width = canvas.width,
                height = canvas.height,
                radius = Math.min(width, height) / 2;

            var colors = [
                "#E30202", "#FF3737", "#FCD72D", "#8EDC23", "#2FCF0B"
            ];

            var arc = d3.arc()
                .outerRadius(radius - 10)
                .innerRadius(radius - 70)
                .padAngle(0.03)
                .context(context);

            var pie = d3.pie();

            var arcs = pie(data);

            context.translate(width / 2, height / 2);

            context.globalAlpha = 0.5;
            arcs.forEach(function(d, i) {
                context.beginPath();
                arc(d);
                context.fillStyle = colors[i];
                context.fill();
            });

            context.globalAlpha = 1;
            context.beginPath();
            arcs.forEach(arc);
            context.lineWidth = 1.5;
            context.stroke();

        </script>
        <div id="container" class="svg-container">
            @*<svg width="500" height="500"></svg>*@
        </div>
            <script>

            var classes = [];

            @foreach (var item in Model)
    {
        var retweet = item.RetweetCount;
        var sentiment = item.SentimentText;
        WriteLiteral("classes.push({ 'id': '" + retweet + "', 'value': " + isZero(retweet) + ", 'color': '" + ChooseColor(sentiment) + "'});\n");
    }
            //var i = 5;
            //classes.push({ "id": i.toString(), "value": 50, "color": '#42f445' });

            alert(classes);

            var svg = d3.select("div#container")
                .append("svg")
                .attr("preserveAspectRatio", "xMinYMin meet")
                .attr("viewBox", "0 0 300 300")
                .classed("svg-content", true);
                width = +svg.attr("width"),
                height = +svg.attr("height");

            var format = d3.format(",d");

            var pack = d3.pack().size([width, height]).padding(1.5);

            var root = d3.hierarchy({ children: classes })
                .sum(function (d) { return d.value; }).each(function (d) {
                    if (id = d.data.id) {
                        var id,
                            i = id.lastIndexOf(".");
                        d.id = id;
                        d.package = id.slice(0, i);
                        d.class = id.slice(i + 1);
                    }
                });

            var node = svg.selectAll(".node").data(pack(root).leaves()).enter().append("g").attr("class", "node")
                .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });

            node.append("circle").attr("id", function (d) { return d.id; }).attr("r", function (d) { return d.r; })
                .style("fill", function (d) { return d.data.color });

            node.append("clipPath").attr("id", function (d) { return "clip-" + d.id; }).append("use")
                .attr("xlink:href", function (d) { return "#" + d.id; });

            node.append("text").attr("clip-path", function (d) { return "url(#clip-" + d.id + ")"; }).selectAll("tspan")
                .data(function (d) { return d.class.split(/(?=[A-Z][^A-Z])/g); }).enter().append("tspan").attr("x", 0)
                .attr("y", function (d, i, nodes) { return 13 + (i - nodes.length / 2 - 0.5) * 10; })
                .text(function (d) { return d; });

            node.append("title").text(function (d) { return d.id + "\n" + format(d.value); });


        </script>
    </div>

<div class="row">

<table class="tablesorter" id="tweetTable">
    <thead>
    <tr>
        <th>
            Index
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ImageUrl)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ScreenName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Text)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CreatedAt)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.IsVerified)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.RetweetCount)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.SentimentText)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FollowerCount)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.StatusesCount)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FavoriteCount)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Lang)
        </th>


    </tr>
    </thead>

    <tbody>
    @{
        var i = 0;
    }
    @foreach (var item in Model)
    {
        <tr>
            <td>
                @(++i)
            </td>
            <td>
                <img src="@item.ImageUrl" alt="@item.ScreenName"/>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ScreenName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Text)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedAt)
            </td>
            <td>
                <span style="display: none">@item.IsVerified</span>
                @if (item.IsVerified == true)
                {
                    <img src="~/img/1307051244_737.png" alt="@item.IsVerified"/>
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RetweetCount)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SentimentText)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FollowerCount)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.StatusesCount)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.FavoriteCount)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.Lang)
            </td>

        </tr>
    }
    </tbody>

</table>
</div>

@section scripts {
    <script language="javascript">
        $(function() {
            $('#tweetTable').tablesorter([1, 0]);
        })
    </script>
}
